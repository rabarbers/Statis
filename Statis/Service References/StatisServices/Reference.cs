//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.225
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This code was auto-generated by Microsoft.Silverlight.ServiceReference, version 4.0.50826.0
// 
namespace Statis.StatisServices {
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Questionnaire", Namespace="http://schemas.datacontract.org/2004/07/StatisServiceContracts")]
    public partial class Questionnaire : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string DescriptionField;
        
        private string NameField;
        
        private System.Collections.ObjectModel.ObservableCollection<Statis.StatisServices.Question> QuestionsField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.ObjectModel.ObservableCollection<Statis.StatisServices.Question> Questions {
            get {
                return this.QuestionsField;
            }
            set {
                if ((object.ReferenceEquals(this.QuestionsField, value) != true)) {
                    this.QuestionsField = value;
                    this.RaisePropertyChanged("Questions");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Question", Namespace="http://schemas.datacontract.org/2004/07/StatisServiceContracts")]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Statis.StatisServices.ImgQuestion))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Statis.StatisServices.TextQuestion))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Statis.StatisServices.ImgTextQuestion))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Statis.StatisServices.ChoiceQuestion))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Statis.StatisServices.ImgChoiceQuestion))]
    public partial class Question : object, System.ComponentModel.INotifyPropertyChanged {
        
        private System.Guid QuestionIdField;
        
        private string TextField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid QuestionId {
            get {
                return this.QuestionIdField;
            }
            set {
                if ((this.QuestionIdField.Equals(value) != true)) {
                    this.QuestionIdField = value;
                    this.RaisePropertyChanged("QuestionId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Text {
            get {
                return this.TextField;
            }
            set {
                if ((object.ReferenceEquals(this.TextField, value) != true)) {
                    this.TextField = value;
                    this.RaisePropertyChanged("Text");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ImgQuestion", Namespace="http://schemas.datacontract.org/2004/07/StatisServiceContracts")]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Collections.ObjectModel.ObservableCollection<string>))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Collections.ObjectModel.ObservableCollection<int>))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Statis.StatisServices.Questionnaire))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Collections.ObjectModel.ObservableCollection<Statis.StatisServices.Question>))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Statis.StatisServices.Question))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Statis.StatisServices.TextQuestion))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Statis.StatisServices.ImgTextQuestion))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Statis.StatisServices.ChoiceQuestion))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Collections.ObjectModel.ObservableCollection<Statis.StatisServices.Choice>))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Statis.StatisServices.Choice))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Statis.StatisServices.NumberChoice))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Statis.StatisServices.TextChoice))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Statis.StatisServices.ImgChoice))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Statis.StatisServices.ImgChoiceQuestion))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Statis.StatisServices.FilledQuestionnaire))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Collections.ObjectModel.ObservableCollection<Statis.StatisServices.Answer>))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Statis.StatisServices.Answer))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Statis.StatisServices.ChoiceAnswer))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Statis.StatisServices.TextAnswer))]
    public partial class ImgQuestion : Statis.StatisServices.Question {
        
        private object ImageField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public object Image {
            get {
                return this.ImageField;
            }
            set {
                if ((object.ReferenceEquals(this.ImageField, value) != true)) {
                    this.ImageField = value;
                    this.RaisePropertyChanged("Image");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="TextQuestion", Namespace="http://schemas.datacontract.org/2004/07/StatisServiceContracts")]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Statis.StatisServices.ImgTextQuestion))]
    public partial class TextQuestion : Statis.StatisServices.Question {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ImgTextQuestion", Namespace="http://schemas.datacontract.org/2004/07/StatisServiceContracts")]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Collections.ObjectModel.ObservableCollection<string>))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Collections.ObjectModel.ObservableCollection<int>))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Statis.StatisServices.Questionnaire))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Collections.ObjectModel.ObservableCollection<Statis.StatisServices.Question>))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Statis.StatisServices.Question))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Statis.StatisServices.ImgQuestion))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Statis.StatisServices.TextQuestion))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Statis.StatisServices.ChoiceQuestion))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Collections.ObjectModel.ObservableCollection<Statis.StatisServices.Choice>))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Statis.StatisServices.Choice))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Statis.StatisServices.NumberChoice))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Statis.StatisServices.TextChoice))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Statis.StatisServices.ImgChoice))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Statis.StatisServices.ImgChoiceQuestion))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Statis.StatisServices.FilledQuestionnaire))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Collections.ObjectModel.ObservableCollection<Statis.StatisServices.Answer>))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Statis.StatisServices.Answer))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Statis.StatisServices.ChoiceAnswer))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Statis.StatisServices.TextAnswer))]
    public partial class ImgTextQuestion : Statis.StatisServices.TextQuestion {
        
        private object ImgField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public object Img {
            get {
                return this.ImgField;
            }
            set {
                if ((object.ReferenceEquals(this.ImgField, value) != true)) {
                    this.ImgField = value;
                    this.RaisePropertyChanged("Img");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ChoiceQuestion", Namespace="http://schemas.datacontract.org/2004/07/StatisServiceContracts")]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Statis.StatisServices.ImgChoiceQuestion))]
    public partial class ChoiceQuestion : Statis.StatisServices.Question {
        
        private System.Collections.ObjectModel.ObservableCollection<Statis.StatisServices.Choice> ChoiceListField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.ObjectModel.ObservableCollection<Statis.StatisServices.Choice> ChoiceList {
            get {
                return this.ChoiceListField;
            }
            set {
                if ((object.ReferenceEquals(this.ChoiceListField, value) != true)) {
                    this.ChoiceListField = value;
                    this.RaisePropertyChanged("ChoiceList");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ImgChoiceQuestion", Namespace="http://schemas.datacontract.org/2004/07/StatisServiceContracts")]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Collections.ObjectModel.ObservableCollection<string>))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Collections.ObjectModel.ObservableCollection<int>))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Statis.StatisServices.Questionnaire))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Collections.ObjectModel.ObservableCollection<Statis.StatisServices.Question>))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Statis.StatisServices.Question))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Statis.StatisServices.ImgQuestion))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Statis.StatisServices.TextQuestion))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Statis.StatisServices.ImgTextQuestion))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Statis.StatisServices.ChoiceQuestion))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Collections.ObjectModel.ObservableCollection<Statis.StatisServices.Choice>))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Statis.StatisServices.Choice))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Statis.StatisServices.NumberChoice))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Statis.StatisServices.TextChoice))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Statis.StatisServices.ImgChoice))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Statis.StatisServices.FilledQuestionnaire))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Collections.ObjectModel.ObservableCollection<Statis.StatisServices.Answer>))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Statis.StatisServices.Answer))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Statis.StatisServices.ChoiceAnswer))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Statis.StatisServices.TextAnswer))]
    public partial class ImgChoiceQuestion : Statis.StatisServices.ChoiceQuestion {
        
        private object ImgField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public object Img {
            get {
                return this.ImgField;
            }
            set {
                if ((object.ReferenceEquals(this.ImgField, value) != true)) {
                    this.ImgField = value;
                    this.RaisePropertyChanged("Img");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Choice", Namespace="http://schemas.datacontract.org/2004/07/StatisServiceContracts")]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Statis.StatisServices.NumberChoice))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Statis.StatisServices.TextChoice))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Statis.StatisServices.ImgChoice))]
    public partial class Choice : object, System.ComponentModel.INotifyPropertyChanged {
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="NumberChoice", Namespace="http://schemas.datacontract.org/2004/07/StatisServiceContracts")]
    public partial class NumberChoice : Statis.StatisServices.Choice {
        
        private double OptionField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Option {
            get {
                return this.OptionField;
            }
            set {
                if ((this.OptionField.Equals(value) != true)) {
                    this.OptionField = value;
                    this.RaisePropertyChanged("Option");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="TextChoice", Namespace="http://schemas.datacontract.org/2004/07/StatisServiceContracts")]
    public partial class TextChoice : Statis.StatisServices.Choice {
        
        private string OptionField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Option {
            get {
                return this.OptionField;
            }
            set {
                if ((object.ReferenceEquals(this.OptionField, value) != true)) {
                    this.OptionField = value;
                    this.RaisePropertyChanged("Option");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ImgChoice", Namespace="http://schemas.datacontract.org/2004/07/StatisServiceContracts")]
    public partial class ImgChoice : Statis.StatisServices.Choice {
        
        private string DescriptionField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="FilledQuestionnaire", Namespace="http://schemas.datacontract.org/2004/07/StatisServiceContracts")]
    public partial class FilledQuestionnaire : object, System.ComponentModel.INotifyPropertyChanged {
        
        private System.Collections.ObjectModel.ObservableCollection<Statis.StatisServices.Answer> AnswersField;
        
        private System.Guid IdField;
        
        private string QuestionnaireNameField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.ObjectModel.ObservableCollection<Statis.StatisServices.Answer> Answers {
            get {
                return this.AnswersField;
            }
            set {
                if ((object.ReferenceEquals(this.AnswersField, value) != true)) {
                    this.AnswersField = value;
                    this.RaisePropertyChanged("Answers");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string QuestionnaireName {
            get {
                return this.QuestionnaireNameField;
            }
            set {
                if ((object.ReferenceEquals(this.QuestionnaireNameField, value) != true)) {
                    this.QuestionnaireNameField = value;
                    this.RaisePropertyChanged("QuestionnaireName");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Answer", Namespace="http://schemas.datacontract.org/2004/07/StatisServiceContracts")]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Statis.StatisServices.ChoiceAnswer))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Statis.StatisServices.TextAnswer))]
    public partial class Answer : object, System.ComponentModel.INotifyPropertyChanged {
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ChoiceAnswer", Namespace="http://schemas.datacontract.org/2004/07/StatisServiceContracts")]
    public partial class ChoiceAnswer : Statis.StatisServices.Answer {
        
        private System.Collections.ObjectModel.ObservableCollection<int> AnswerListField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.ObjectModel.ObservableCollection<int> AnswerList {
            get {
                return this.AnswerListField;
            }
            set {
                if ((object.ReferenceEquals(this.AnswerListField, value) != true)) {
                    this.AnswerListField = value;
                    this.RaisePropertyChanged("AnswerList");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="TextAnswer", Namespace="http://schemas.datacontract.org/2004/07/StatisServiceContracts")]
    public partial class TextAnswer : Statis.StatisServices.Answer {
        
        private string AnswerTextField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string AnswerText {
            get {
                return this.AnswerTextField;
            }
            set {
                if ((object.ReferenceEquals(this.AnswerTextField, value) != true)) {
                    this.AnswerTextField = value;
                    this.RaisePropertyChanged("AnswerText");
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="StatisServices.IQuestionnaireService")]
    public interface IQuestionnaireService {
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IQuestionnaireService/GetQuestionnaire", ReplyAction="http://tempuri.org/IQuestionnaireService/GetQuestionnaireResponse")]
        System.IAsyncResult BeginGetQuestionnaire(string questionnaireName, System.AsyncCallback callback, object asyncState);
        
        Statis.StatisServices.Questionnaire EndGetQuestionnaire(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, AsyncPattern=true, Action="http://tempuri.org/IQuestionnaireService/StoreQuestionnaire")]
        System.IAsyncResult BeginStoreQuestionnaire(Statis.StatisServices.Questionnaire questionnaire, System.AsyncCallback callback, object asyncState);
        
        void EndStoreQuestionnaire(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, AsyncPattern=true, Action="http://tempuri.org/IQuestionnaireService/DeleteQuestionnaire")]
        System.IAsyncResult BeginDeleteQuestionnaire(string questionnaireName, System.AsyncCallback callback, object asyncState);
        
        void EndDeleteQuestionnaire(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IQuestionnaireService/GetUserQuestionnaireList", ReplyAction="http://tempuri.org/IQuestionnaireService/GetUserQuestionnaireListResponse")]
        System.IAsyncResult BeginGetUserQuestionnaireList(string userName, System.AsyncCallback callback, object asyncState);
        
        System.Collections.ObjectModel.ObservableCollection<string> EndGetUserQuestionnaireList(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IQuestionnaireService/GetUserAnalysts", ReplyAction="http://tempuri.org/IQuestionnaireService/GetUserAnalystsResponse")]
        System.IAsyncResult BeginGetUserAnalysts(string userName, System.AsyncCallback callback, object asyncState);
        
        System.Collections.ObjectModel.ObservableCollection<string> EndGetUserAnalysts(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IQuestionnaireService/GetUserRespondents", ReplyAction="http://tempuri.org/IQuestionnaireService/GetUserRespondentsResponse")]
        System.IAsyncResult BeginGetUserRespondents(string userName, System.AsyncCallback callback, object asyncState);
        
        System.Collections.ObjectModel.ObservableCollection<string> EndGetUserRespondents(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IQuestionnaireService/AddAnalyst", ReplyAction="http://tempuri.org/IQuestionnaireService/AddAnalystResponse")]
        System.IAsyncResult BeginAddAnalyst(string currentUserName, string analystUserName, System.AsyncCallback callback, object asyncState);
        
        bool EndAddAnalyst(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, AsyncPattern=true, Action="http://tempuri.org/IQuestionnaireService/RemoveAnalyst")]
        System.IAsyncResult BeginRemoveAnalyst(string currentUserName, string analystUserName, System.AsyncCallback callback, object asyncState);
        
        void EndRemoveAnalyst(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IQuestionnaireService/AddRespondent", ReplyAction="http://tempuri.org/IQuestionnaireService/AddRespondentResponse")]
        System.IAsyncResult BeginAddRespondent(string currentUserName, string respondentEmail, System.AsyncCallback callback, object asyncState);
        
        bool EndAddRespondent(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, AsyncPattern=true, Action="http://tempuri.org/IQuestionnaireService/RemoveRespondent")]
        System.IAsyncResult BeginRemoveRespondent(string currentUserName, string respondentEmail, System.AsyncCallback callback, object asyncState);
        
        void EndRemoveRespondent(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, AsyncPattern=true, Action="http://tempuri.org/IQuestionnaireService/StoreFilledQuestionnaire")]
        System.IAsyncResult BeginStoreFilledQuestionnaire(Statis.StatisServices.FilledQuestionnaire filled, System.AsyncCallback callback, object asyncState);
        
        void EndStoreFilledQuestionnaire(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IQuestionnaireService/GetFilledQuestionnaire", ReplyAction="http://tempuri.org/IQuestionnaireService/GetFilledQuestionnaireResponse")]
        System.IAsyncResult BeginGetFilledQuestionnaire(System.AsyncCallback callback, object asyncState);
        
        Statis.StatisServices.FilledQuestionnaire EndGetFilledQuestionnaire(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IQuestionnaireServiceChannel : Statis.StatisServices.IQuestionnaireService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetQuestionnaireCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetQuestionnaireCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Statis.StatisServices.Questionnaire Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Statis.StatisServices.Questionnaire)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetUserQuestionnaireListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetUserQuestionnaireListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.ObjectModel.ObservableCollection<string> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.ObjectModel.ObservableCollection<string>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetUserAnalystsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetUserAnalystsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.ObjectModel.ObservableCollection<string> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.ObjectModel.ObservableCollection<string>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetUserRespondentsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetUserRespondentsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.ObjectModel.ObservableCollection<string> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.ObjectModel.ObservableCollection<string>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class AddAnalystCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public AddAnalystCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class AddRespondentCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public AddRespondentCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetFilledQuestionnaireCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetFilledQuestionnaireCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Statis.StatisServices.FilledQuestionnaire Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Statis.StatisServices.FilledQuestionnaire)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class QuestionnaireServiceClient : System.ServiceModel.ClientBase<Statis.StatisServices.IQuestionnaireService>, Statis.StatisServices.IQuestionnaireService {
        
        private BeginOperationDelegate onBeginGetQuestionnaireDelegate;
        
        private EndOperationDelegate onEndGetQuestionnaireDelegate;
        
        private System.Threading.SendOrPostCallback onGetQuestionnaireCompletedDelegate;
        
        private BeginOperationDelegate onBeginStoreQuestionnaireDelegate;
        
        private EndOperationDelegate onEndStoreQuestionnaireDelegate;
        
        private System.Threading.SendOrPostCallback onStoreQuestionnaireCompletedDelegate;
        
        private BeginOperationDelegate onBeginDeleteQuestionnaireDelegate;
        
        private EndOperationDelegate onEndDeleteQuestionnaireDelegate;
        
        private System.Threading.SendOrPostCallback onDeleteQuestionnaireCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetUserQuestionnaireListDelegate;
        
        private EndOperationDelegate onEndGetUserQuestionnaireListDelegate;
        
        private System.Threading.SendOrPostCallback onGetUserQuestionnaireListCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetUserAnalystsDelegate;
        
        private EndOperationDelegate onEndGetUserAnalystsDelegate;
        
        private System.Threading.SendOrPostCallback onGetUserAnalystsCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetUserRespondentsDelegate;
        
        private EndOperationDelegate onEndGetUserRespondentsDelegate;
        
        private System.Threading.SendOrPostCallback onGetUserRespondentsCompletedDelegate;
        
        private BeginOperationDelegate onBeginAddAnalystDelegate;
        
        private EndOperationDelegate onEndAddAnalystDelegate;
        
        private System.Threading.SendOrPostCallback onAddAnalystCompletedDelegate;
        
        private BeginOperationDelegate onBeginRemoveAnalystDelegate;
        
        private EndOperationDelegate onEndRemoveAnalystDelegate;
        
        private System.Threading.SendOrPostCallback onRemoveAnalystCompletedDelegate;
        
        private BeginOperationDelegate onBeginAddRespondentDelegate;
        
        private EndOperationDelegate onEndAddRespondentDelegate;
        
        private System.Threading.SendOrPostCallback onAddRespondentCompletedDelegate;
        
        private BeginOperationDelegate onBeginRemoveRespondentDelegate;
        
        private EndOperationDelegate onEndRemoveRespondentDelegate;
        
        private System.Threading.SendOrPostCallback onRemoveRespondentCompletedDelegate;
        
        private BeginOperationDelegate onBeginStoreFilledQuestionnaireDelegate;
        
        private EndOperationDelegate onEndStoreFilledQuestionnaireDelegate;
        
        private System.Threading.SendOrPostCallback onStoreFilledQuestionnaireCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetFilledQuestionnaireDelegate;
        
        private EndOperationDelegate onEndGetFilledQuestionnaireDelegate;
        
        private System.Threading.SendOrPostCallback onGetFilledQuestionnaireCompletedDelegate;
        
        private BeginOperationDelegate onBeginOpenDelegate;
        
        private EndOperationDelegate onEndOpenDelegate;
        
        private System.Threading.SendOrPostCallback onOpenCompletedDelegate;
        
        private BeginOperationDelegate onBeginCloseDelegate;
        
        private EndOperationDelegate onEndCloseDelegate;
        
        private System.Threading.SendOrPostCallback onCloseCompletedDelegate;
        
        public QuestionnaireServiceClient() {
        }
        
        public QuestionnaireServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public QuestionnaireServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public QuestionnaireServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public QuestionnaireServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Net.CookieContainer CookieContainer {
            get {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    return httpCookieContainerManager.CookieContainer;
                }
                else {
                    return null;
                }
            }
            set {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    httpCookieContainerManager.CookieContainer = value;
                }
                else {
                    throw new System.InvalidOperationException("Unable to set the CookieContainer. Please make sure the binding contains an HttpC" +
                            "ookieContainerBindingElement.");
                }
            }
        }
        
        public event System.EventHandler<GetQuestionnaireCompletedEventArgs> GetQuestionnaireCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> StoreQuestionnaireCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> DeleteQuestionnaireCompleted;
        
        public event System.EventHandler<GetUserQuestionnaireListCompletedEventArgs> GetUserQuestionnaireListCompleted;
        
        public event System.EventHandler<GetUserAnalystsCompletedEventArgs> GetUserAnalystsCompleted;
        
        public event System.EventHandler<GetUserRespondentsCompletedEventArgs> GetUserRespondentsCompleted;
        
        public event System.EventHandler<AddAnalystCompletedEventArgs> AddAnalystCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> RemoveAnalystCompleted;
        
        public event System.EventHandler<AddRespondentCompletedEventArgs> AddRespondentCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> RemoveRespondentCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> StoreFilledQuestionnaireCompleted;
        
        public event System.EventHandler<GetFilledQuestionnaireCompletedEventArgs> GetFilledQuestionnaireCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> OpenCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> CloseCompleted;
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Statis.StatisServices.IQuestionnaireService.BeginGetQuestionnaire(string questionnaireName, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetQuestionnaire(questionnaireName, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Statis.StatisServices.Questionnaire Statis.StatisServices.IQuestionnaireService.EndGetQuestionnaire(System.IAsyncResult result) {
            return base.Channel.EndGetQuestionnaire(result);
        }
        
        private System.IAsyncResult OnBeginGetQuestionnaire(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string questionnaireName = ((string)(inValues[0]));
            return ((Statis.StatisServices.IQuestionnaireService)(this)).BeginGetQuestionnaire(questionnaireName, callback, asyncState);
        }
        
        private object[] OnEndGetQuestionnaire(System.IAsyncResult result) {
            Statis.StatisServices.Questionnaire retVal = ((Statis.StatisServices.IQuestionnaireService)(this)).EndGetQuestionnaire(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetQuestionnaireCompleted(object state) {
            if ((this.GetQuestionnaireCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetQuestionnaireCompleted(this, new GetQuestionnaireCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetQuestionnaireAsync(string questionnaireName) {
            this.GetQuestionnaireAsync(questionnaireName, null);
        }
        
        public void GetQuestionnaireAsync(string questionnaireName, object userState) {
            if ((this.onBeginGetQuestionnaireDelegate == null)) {
                this.onBeginGetQuestionnaireDelegate = new BeginOperationDelegate(this.OnBeginGetQuestionnaire);
            }
            if ((this.onEndGetQuestionnaireDelegate == null)) {
                this.onEndGetQuestionnaireDelegate = new EndOperationDelegate(this.OnEndGetQuestionnaire);
            }
            if ((this.onGetQuestionnaireCompletedDelegate == null)) {
                this.onGetQuestionnaireCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetQuestionnaireCompleted);
            }
            base.InvokeAsync(this.onBeginGetQuestionnaireDelegate, new object[] {
                        questionnaireName}, this.onEndGetQuestionnaireDelegate, this.onGetQuestionnaireCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Statis.StatisServices.IQuestionnaireService.BeginStoreQuestionnaire(Statis.StatisServices.Questionnaire questionnaire, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginStoreQuestionnaire(questionnaire, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void Statis.StatisServices.IQuestionnaireService.EndStoreQuestionnaire(System.IAsyncResult result) {
            base.Channel.EndStoreQuestionnaire(result);
        }
        
        private System.IAsyncResult OnBeginStoreQuestionnaire(object[] inValues, System.AsyncCallback callback, object asyncState) {
            Statis.StatisServices.Questionnaire questionnaire = ((Statis.StatisServices.Questionnaire)(inValues[0]));
            return ((Statis.StatisServices.IQuestionnaireService)(this)).BeginStoreQuestionnaire(questionnaire, callback, asyncState);
        }
        
        private object[] OnEndStoreQuestionnaire(System.IAsyncResult result) {
            ((Statis.StatisServices.IQuestionnaireService)(this)).EndStoreQuestionnaire(result);
            return null;
        }
        
        private void OnStoreQuestionnaireCompleted(object state) {
            if ((this.StoreQuestionnaireCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.StoreQuestionnaireCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void StoreQuestionnaireAsync(Statis.StatisServices.Questionnaire questionnaire) {
            this.StoreQuestionnaireAsync(questionnaire, null);
        }
        
        public void StoreQuestionnaireAsync(Statis.StatisServices.Questionnaire questionnaire, object userState) {
            if ((this.onBeginStoreQuestionnaireDelegate == null)) {
                this.onBeginStoreQuestionnaireDelegate = new BeginOperationDelegate(this.OnBeginStoreQuestionnaire);
            }
            if ((this.onEndStoreQuestionnaireDelegate == null)) {
                this.onEndStoreQuestionnaireDelegate = new EndOperationDelegate(this.OnEndStoreQuestionnaire);
            }
            if ((this.onStoreQuestionnaireCompletedDelegate == null)) {
                this.onStoreQuestionnaireCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnStoreQuestionnaireCompleted);
            }
            base.InvokeAsync(this.onBeginStoreQuestionnaireDelegate, new object[] {
                        questionnaire}, this.onEndStoreQuestionnaireDelegate, this.onStoreQuestionnaireCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Statis.StatisServices.IQuestionnaireService.BeginDeleteQuestionnaire(string questionnaireName, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginDeleteQuestionnaire(questionnaireName, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void Statis.StatisServices.IQuestionnaireService.EndDeleteQuestionnaire(System.IAsyncResult result) {
            base.Channel.EndDeleteQuestionnaire(result);
        }
        
        private System.IAsyncResult OnBeginDeleteQuestionnaire(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string questionnaireName = ((string)(inValues[0]));
            return ((Statis.StatisServices.IQuestionnaireService)(this)).BeginDeleteQuestionnaire(questionnaireName, callback, asyncState);
        }
        
        private object[] OnEndDeleteQuestionnaire(System.IAsyncResult result) {
            ((Statis.StatisServices.IQuestionnaireService)(this)).EndDeleteQuestionnaire(result);
            return null;
        }
        
        private void OnDeleteQuestionnaireCompleted(object state) {
            if ((this.DeleteQuestionnaireCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.DeleteQuestionnaireCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void DeleteQuestionnaireAsync(string questionnaireName) {
            this.DeleteQuestionnaireAsync(questionnaireName, null);
        }
        
        public void DeleteQuestionnaireAsync(string questionnaireName, object userState) {
            if ((this.onBeginDeleteQuestionnaireDelegate == null)) {
                this.onBeginDeleteQuestionnaireDelegate = new BeginOperationDelegate(this.OnBeginDeleteQuestionnaire);
            }
            if ((this.onEndDeleteQuestionnaireDelegate == null)) {
                this.onEndDeleteQuestionnaireDelegate = new EndOperationDelegate(this.OnEndDeleteQuestionnaire);
            }
            if ((this.onDeleteQuestionnaireCompletedDelegate == null)) {
                this.onDeleteQuestionnaireCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDeleteQuestionnaireCompleted);
            }
            base.InvokeAsync(this.onBeginDeleteQuestionnaireDelegate, new object[] {
                        questionnaireName}, this.onEndDeleteQuestionnaireDelegate, this.onDeleteQuestionnaireCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Statis.StatisServices.IQuestionnaireService.BeginGetUserQuestionnaireList(string userName, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetUserQuestionnaireList(userName, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.ObjectModel.ObservableCollection<string> Statis.StatisServices.IQuestionnaireService.EndGetUserQuestionnaireList(System.IAsyncResult result) {
            return base.Channel.EndGetUserQuestionnaireList(result);
        }
        
        private System.IAsyncResult OnBeginGetUserQuestionnaireList(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string userName = ((string)(inValues[0]));
            return ((Statis.StatisServices.IQuestionnaireService)(this)).BeginGetUserQuestionnaireList(userName, callback, asyncState);
        }
        
        private object[] OnEndGetUserQuestionnaireList(System.IAsyncResult result) {
            System.Collections.ObjectModel.ObservableCollection<string> retVal = ((Statis.StatisServices.IQuestionnaireService)(this)).EndGetUserQuestionnaireList(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetUserQuestionnaireListCompleted(object state) {
            if ((this.GetUserQuestionnaireListCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetUserQuestionnaireListCompleted(this, new GetUserQuestionnaireListCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetUserQuestionnaireListAsync(string userName) {
            this.GetUserQuestionnaireListAsync(userName, null);
        }
        
        public void GetUserQuestionnaireListAsync(string userName, object userState) {
            if ((this.onBeginGetUserQuestionnaireListDelegate == null)) {
                this.onBeginGetUserQuestionnaireListDelegate = new BeginOperationDelegate(this.OnBeginGetUserQuestionnaireList);
            }
            if ((this.onEndGetUserQuestionnaireListDelegate == null)) {
                this.onEndGetUserQuestionnaireListDelegate = new EndOperationDelegate(this.OnEndGetUserQuestionnaireList);
            }
            if ((this.onGetUserQuestionnaireListCompletedDelegate == null)) {
                this.onGetUserQuestionnaireListCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetUserQuestionnaireListCompleted);
            }
            base.InvokeAsync(this.onBeginGetUserQuestionnaireListDelegate, new object[] {
                        userName}, this.onEndGetUserQuestionnaireListDelegate, this.onGetUserQuestionnaireListCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Statis.StatisServices.IQuestionnaireService.BeginGetUserAnalysts(string userName, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetUserAnalysts(userName, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.ObjectModel.ObservableCollection<string> Statis.StatisServices.IQuestionnaireService.EndGetUserAnalysts(System.IAsyncResult result) {
            return base.Channel.EndGetUserAnalysts(result);
        }
        
        private System.IAsyncResult OnBeginGetUserAnalysts(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string userName = ((string)(inValues[0]));
            return ((Statis.StatisServices.IQuestionnaireService)(this)).BeginGetUserAnalysts(userName, callback, asyncState);
        }
        
        private object[] OnEndGetUserAnalysts(System.IAsyncResult result) {
            System.Collections.ObjectModel.ObservableCollection<string> retVal = ((Statis.StatisServices.IQuestionnaireService)(this)).EndGetUserAnalysts(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetUserAnalystsCompleted(object state) {
            if ((this.GetUserAnalystsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetUserAnalystsCompleted(this, new GetUserAnalystsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetUserAnalystsAsync(string userName) {
            this.GetUserAnalystsAsync(userName, null);
        }
        
        public void GetUserAnalystsAsync(string userName, object userState) {
            if ((this.onBeginGetUserAnalystsDelegate == null)) {
                this.onBeginGetUserAnalystsDelegate = new BeginOperationDelegate(this.OnBeginGetUserAnalysts);
            }
            if ((this.onEndGetUserAnalystsDelegate == null)) {
                this.onEndGetUserAnalystsDelegate = new EndOperationDelegate(this.OnEndGetUserAnalysts);
            }
            if ((this.onGetUserAnalystsCompletedDelegate == null)) {
                this.onGetUserAnalystsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetUserAnalystsCompleted);
            }
            base.InvokeAsync(this.onBeginGetUserAnalystsDelegate, new object[] {
                        userName}, this.onEndGetUserAnalystsDelegate, this.onGetUserAnalystsCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Statis.StatisServices.IQuestionnaireService.BeginGetUserRespondents(string userName, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetUserRespondents(userName, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.ObjectModel.ObservableCollection<string> Statis.StatisServices.IQuestionnaireService.EndGetUserRespondents(System.IAsyncResult result) {
            return base.Channel.EndGetUserRespondents(result);
        }
        
        private System.IAsyncResult OnBeginGetUserRespondents(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string userName = ((string)(inValues[0]));
            return ((Statis.StatisServices.IQuestionnaireService)(this)).BeginGetUserRespondents(userName, callback, asyncState);
        }
        
        private object[] OnEndGetUserRespondents(System.IAsyncResult result) {
            System.Collections.ObjectModel.ObservableCollection<string> retVal = ((Statis.StatisServices.IQuestionnaireService)(this)).EndGetUserRespondents(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetUserRespondentsCompleted(object state) {
            if ((this.GetUserRespondentsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetUserRespondentsCompleted(this, new GetUserRespondentsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetUserRespondentsAsync(string userName) {
            this.GetUserRespondentsAsync(userName, null);
        }
        
        public void GetUserRespondentsAsync(string userName, object userState) {
            if ((this.onBeginGetUserRespondentsDelegate == null)) {
                this.onBeginGetUserRespondentsDelegate = new BeginOperationDelegate(this.OnBeginGetUserRespondents);
            }
            if ((this.onEndGetUserRespondentsDelegate == null)) {
                this.onEndGetUserRespondentsDelegate = new EndOperationDelegate(this.OnEndGetUserRespondents);
            }
            if ((this.onGetUserRespondentsCompletedDelegate == null)) {
                this.onGetUserRespondentsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetUserRespondentsCompleted);
            }
            base.InvokeAsync(this.onBeginGetUserRespondentsDelegate, new object[] {
                        userName}, this.onEndGetUserRespondentsDelegate, this.onGetUserRespondentsCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Statis.StatisServices.IQuestionnaireService.BeginAddAnalyst(string currentUserName, string analystUserName, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginAddAnalyst(currentUserName, analystUserName, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        bool Statis.StatisServices.IQuestionnaireService.EndAddAnalyst(System.IAsyncResult result) {
            return base.Channel.EndAddAnalyst(result);
        }
        
        private System.IAsyncResult OnBeginAddAnalyst(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string currentUserName = ((string)(inValues[0]));
            string analystUserName = ((string)(inValues[1]));
            return ((Statis.StatisServices.IQuestionnaireService)(this)).BeginAddAnalyst(currentUserName, analystUserName, callback, asyncState);
        }
        
        private object[] OnEndAddAnalyst(System.IAsyncResult result) {
            bool retVal = ((Statis.StatisServices.IQuestionnaireService)(this)).EndAddAnalyst(result);
            return new object[] {
                    retVal};
        }
        
        private void OnAddAnalystCompleted(object state) {
            if ((this.AddAnalystCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.AddAnalystCompleted(this, new AddAnalystCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void AddAnalystAsync(string currentUserName, string analystUserName) {
            this.AddAnalystAsync(currentUserName, analystUserName, null);
        }
        
        public void AddAnalystAsync(string currentUserName, string analystUserName, object userState) {
            if ((this.onBeginAddAnalystDelegate == null)) {
                this.onBeginAddAnalystDelegate = new BeginOperationDelegate(this.OnBeginAddAnalyst);
            }
            if ((this.onEndAddAnalystDelegate == null)) {
                this.onEndAddAnalystDelegate = new EndOperationDelegate(this.OnEndAddAnalyst);
            }
            if ((this.onAddAnalystCompletedDelegate == null)) {
                this.onAddAnalystCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnAddAnalystCompleted);
            }
            base.InvokeAsync(this.onBeginAddAnalystDelegate, new object[] {
                        currentUserName,
                        analystUserName}, this.onEndAddAnalystDelegate, this.onAddAnalystCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Statis.StatisServices.IQuestionnaireService.BeginRemoveAnalyst(string currentUserName, string analystUserName, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginRemoveAnalyst(currentUserName, analystUserName, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void Statis.StatisServices.IQuestionnaireService.EndRemoveAnalyst(System.IAsyncResult result) {
            base.Channel.EndRemoveAnalyst(result);
        }
        
        private System.IAsyncResult OnBeginRemoveAnalyst(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string currentUserName = ((string)(inValues[0]));
            string analystUserName = ((string)(inValues[1]));
            return ((Statis.StatisServices.IQuestionnaireService)(this)).BeginRemoveAnalyst(currentUserName, analystUserName, callback, asyncState);
        }
        
        private object[] OnEndRemoveAnalyst(System.IAsyncResult result) {
            ((Statis.StatisServices.IQuestionnaireService)(this)).EndRemoveAnalyst(result);
            return null;
        }
        
        private void OnRemoveAnalystCompleted(object state) {
            if ((this.RemoveAnalystCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.RemoveAnalystCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void RemoveAnalystAsync(string currentUserName, string analystUserName) {
            this.RemoveAnalystAsync(currentUserName, analystUserName, null);
        }
        
        public void RemoveAnalystAsync(string currentUserName, string analystUserName, object userState) {
            if ((this.onBeginRemoveAnalystDelegate == null)) {
                this.onBeginRemoveAnalystDelegate = new BeginOperationDelegate(this.OnBeginRemoveAnalyst);
            }
            if ((this.onEndRemoveAnalystDelegate == null)) {
                this.onEndRemoveAnalystDelegate = new EndOperationDelegate(this.OnEndRemoveAnalyst);
            }
            if ((this.onRemoveAnalystCompletedDelegate == null)) {
                this.onRemoveAnalystCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnRemoveAnalystCompleted);
            }
            base.InvokeAsync(this.onBeginRemoveAnalystDelegate, new object[] {
                        currentUserName,
                        analystUserName}, this.onEndRemoveAnalystDelegate, this.onRemoveAnalystCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Statis.StatisServices.IQuestionnaireService.BeginAddRespondent(string currentUserName, string respondentEmail, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginAddRespondent(currentUserName, respondentEmail, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        bool Statis.StatisServices.IQuestionnaireService.EndAddRespondent(System.IAsyncResult result) {
            return base.Channel.EndAddRespondent(result);
        }
        
        private System.IAsyncResult OnBeginAddRespondent(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string currentUserName = ((string)(inValues[0]));
            string respondentEmail = ((string)(inValues[1]));
            return ((Statis.StatisServices.IQuestionnaireService)(this)).BeginAddRespondent(currentUserName, respondentEmail, callback, asyncState);
        }
        
        private object[] OnEndAddRespondent(System.IAsyncResult result) {
            bool retVal = ((Statis.StatisServices.IQuestionnaireService)(this)).EndAddRespondent(result);
            return new object[] {
                    retVal};
        }
        
        private void OnAddRespondentCompleted(object state) {
            if ((this.AddRespondentCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.AddRespondentCompleted(this, new AddRespondentCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void AddRespondentAsync(string currentUserName, string respondentEmail) {
            this.AddRespondentAsync(currentUserName, respondentEmail, null);
        }
        
        public void AddRespondentAsync(string currentUserName, string respondentEmail, object userState) {
            if ((this.onBeginAddRespondentDelegate == null)) {
                this.onBeginAddRespondentDelegate = new BeginOperationDelegate(this.OnBeginAddRespondent);
            }
            if ((this.onEndAddRespondentDelegate == null)) {
                this.onEndAddRespondentDelegate = new EndOperationDelegate(this.OnEndAddRespondent);
            }
            if ((this.onAddRespondentCompletedDelegate == null)) {
                this.onAddRespondentCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnAddRespondentCompleted);
            }
            base.InvokeAsync(this.onBeginAddRespondentDelegate, new object[] {
                        currentUserName,
                        respondentEmail}, this.onEndAddRespondentDelegate, this.onAddRespondentCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Statis.StatisServices.IQuestionnaireService.BeginRemoveRespondent(string currentUserName, string respondentEmail, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginRemoveRespondent(currentUserName, respondentEmail, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void Statis.StatisServices.IQuestionnaireService.EndRemoveRespondent(System.IAsyncResult result) {
            base.Channel.EndRemoveRespondent(result);
        }
        
        private System.IAsyncResult OnBeginRemoveRespondent(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string currentUserName = ((string)(inValues[0]));
            string respondentEmail = ((string)(inValues[1]));
            return ((Statis.StatisServices.IQuestionnaireService)(this)).BeginRemoveRespondent(currentUserName, respondentEmail, callback, asyncState);
        }
        
        private object[] OnEndRemoveRespondent(System.IAsyncResult result) {
            ((Statis.StatisServices.IQuestionnaireService)(this)).EndRemoveRespondent(result);
            return null;
        }
        
        private void OnRemoveRespondentCompleted(object state) {
            if ((this.RemoveRespondentCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.RemoveRespondentCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void RemoveRespondentAsync(string currentUserName, string respondentEmail) {
            this.RemoveRespondentAsync(currentUserName, respondentEmail, null);
        }
        
        public void RemoveRespondentAsync(string currentUserName, string respondentEmail, object userState) {
            if ((this.onBeginRemoveRespondentDelegate == null)) {
                this.onBeginRemoveRespondentDelegate = new BeginOperationDelegate(this.OnBeginRemoveRespondent);
            }
            if ((this.onEndRemoveRespondentDelegate == null)) {
                this.onEndRemoveRespondentDelegate = new EndOperationDelegate(this.OnEndRemoveRespondent);
            }
            if ((this.onRemoveRespondentCompletedDelegate == null)) {
                this.onRemoveRespondentCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnRemoveRespondentCompleted);
            }
            base.InvokeAsync(this.onBeginRemoveRespondentDelegate, new object[] {
                        currentUserName,
                        respondentEmail}, this.onEndRemoveRespondentDelegate, this.onRemoveRespondentCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Statis.StatisServices.IQuestionnaireService.BeginStoreFilledQuestionnaire(Statis.StatisServices.FilledQuestionnaire filled, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginStoreFilledQuestionnaire(filled, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void Statis.StatisServices.IQuestionnaireService.EndStoreFilledQuestionnaire(System.IAsyncResult result) {
            base.Channel.EndStoreFilledQuestionnaire(result);
        }
        
        private System.IAsyncResult OnBeginStoreFilledQuestionnaire(object[] inValues, System.AsyncCallback callback, object asyncState) {
            Statis.StatisServices.FilledQuestionnaire filled = ((Statis.StatisServices.FilledQuestionnaire)(inValues[0]));
            return ((Statis.StatisServices.IQuestionnaireService)(this)).BeginStoreFilledQuestionnaire(filled, callback, asyncState);
        }
        
        private object[] OnEndStoreFilledQuestionnaire(System.IAsyncResult result) {
            ((Statis.StatisServices.IQuestionnaireService)(this)).EndStoreFilledQuestionnaire(result);
            return null;
        }
        
        private void OnStoreFilledQuestionnaireCompleted(object state) {
            if ((this.StoreFilledQuestionnaireCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.StoreFilledQuestionnaireCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void StoreFilledQuestionnaireAsync(Statis.StatisServices.FilledQuestionnaire filled) {
            this.StoreFilledQuestionnaireAsync(filled, null);
        }
        
        public void StoreFilledQuestionnaireAsync(Statis.StatisServices.FilledQuestionnaire filled, object userState) {
            if ((this.onBeginStoreFilledQuestionnaireDelegate == null)) {
                this.onBeginStoreFilledQuestionnaireDelegate = new BeginOperationDelegate(this.OnBeginStoreFilledQuestionnaire);
            }
            if ((this.onEndStoreFilledQuestionnaireDelegate == null)) {
                this.onEndStoreFilledQuestionnaireDelegate = new EndOperationDelegate(this.OnEndStoreFilledQuestionnaire);
            }
            if ((this.onStoreFilledQuestionnaireCompletedDelegate == null)) {
                this.onStoreFilledQuestionnaireCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnStoreFilledQuestionnaireCompleted);
            }
            base.InvokeAsync(this.onBeginStoreFilledQuestionnaireDelegate, new object[] {
                        filled}, this.onEndStoreFilledQuestionnaireDelegate, this.onStoreFilledQuestionnaireCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Statis.StatisServices.IQuestionnaireService.BeginGetFilledQuestionnaire(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetFilledQuestionnaire(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Statis.StatisServices.FilledQuestionnaire Statis.StatisServices.IQuestionnaireService.EndGetFilledQuestionnaire(System.IAsyncResult result) {
            return base.Channel.EndGetFilledQuestionnaire(result);
        }
        
        private System.IAsyncResult OnBeginGetFilledQuestionnaire(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((Statis.StatisServices.IQuestionnaireService)(this)).BeginGetFilledQuestionnaire(callback, asyncState);
        }
        
        private object[] OnEndGetFilledQuestionnaire(System.IAsyncResult result) {
            Statis.StatisServices.FilledQuestionnaire retVal = ((Statis.StatisServices.IQuestionnaireService)(this)).EndGetFilledQuestionnaire(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetFilledQuestionnaireCompleted(object state) {
            if ((this.GetFilledQuestionnaireCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetFilledQuestionnaireCompleted(this, new GetFilledQuestionnaireCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetFilledQuestionnaireAsync() {
            this.GetFilledQuestionnaireAsync(null);
        }
        
        public void GetFilledQuestionnaireAsync(object userState) {
            if ((this.onBeginGetFilledQuestionnaireDelegate == null)) {
                this.onBeginGetFilledQuestionnaireDelegate = new BeginOperationDelegate(this.OnBeginGetFilledQuestionnaire);
            }
            if ((this.onEndGetFilledQuestionnaireDelegate == null)) {
                this.onEndGetFilledQuestionnaireDelegate = new EndOperationDelegate(this.OnEndGetFilledQuestionnaire);
            }
            if ((this.onGetFilledQuestionnaireCompletedDelegate == null)) {
                this.onGetFilledQuestionnaireCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetFilledQuestionnaireCompleted);
            }
            base.InvokeAsync(this.onBeginGetFilledQuestionnaireDelegate, null, this.onEndGetFilledQuestionnaireDelegate, this.onGetFilledQuestionnaireCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginOpen(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(callback, asyncState);
        }
        
        private object[] OnEndOpen(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndOpen(result);
            return null;
        }
        
        private void OnOpenCompleted(object state) {
            if ((this.OpenCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.OpenCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void OpenAsync() {
            this.OpenAsync(null);
        }
        
        public void OpenAsync(object userState) {
            if ((this.onBeginOpenDelegate == null)) {
                this.onBeginOpenDelegate = new BeginOperationDelegate(this.OnBeginOpen);
            }
            if ((this.onEndOpenDelegate == null)) {
                this.onEndOpenDelegate = new EndOperationDelegate(this.OnEndOpen);
            }
            if ((this.onOpenCompletedDelegate == null)) {
                this.onOpenCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnOpenCompleted);
            }
            base.InvokeAsync(this.onBeginOpenDelegate, null, this.onEndOpenDelegate, this.onOpenCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginClose(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginClose(callback, asyncState);
        }
        
        private object[] OnEndClose(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndClose(result);
            return null;
        }
        
        private void OnCloseCompleted(object state) {
            if ((this.CloseCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CloseCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CloseAsync() {
            this.CloseAsync(null);
        }
        
        public void CloseAsync(object userState) {
            if ((this.onBeginCloseDelegate == null)) {
                this.onBeginCloseDelegate = new BeginOperationDelegate(this.OnBeginClose);
            }
            if ((this.onEndCloseDelegate == null)) {
                this.onEndCloseDelegate = new EndOperationDelegate(this.OnEndClose);
            }
            if ((this.onCloseCompletedDelegate == null)) {
                this.onCloseCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCloseCompleted);
            }
            base.InvokeAsync(this.onBeginCloseDelegate, null, this.onEndCloseDelegate, this.onCloseCompletedDelegate, userState);
        }
        
        protected override Statis.StatisServices.IQuestionnaireService CreateChannel() {
            return new QuestionnaireServiceClientChannel(this);
        }
        
        private class QuestionnaireServiceClientChannel : ChannelBase<Statis.StatisServices.IQuestionnaireService>, Statis.StatisServices.IQuestionnaireService {
            
            public QuestionnaireServiceClientChannel(System.ServiceModel.ClientBase<Statis.StatisServices.IQuestionnaireService> client) : 
                    base(client) {
            }
            
            public System.IAsyncResult BeginGetQuestionnaire(string questionnaireName, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = questionnaireName;
                System.IAsyncResult _result = base.BeginInvoke("GetQuestionnaire", _args, callback, asyncState);
                return _result;
            }
            
            public Statis.StatisServices.Questionnaire EndGetQuestionnaire(System.IAsyncResult result) {
                object[] _args = new object[0];
                Statis.StatisServices.Questionnaire _result = ((Statis.StatisServices.Questionnaire)(base.EndInvoke("GetQuestionnaire", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginStoreQuestionnaire(Statis.StatisServices.Questionnaire questionnaire, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = questionnaire;
                System.IAsyncResult _result = base.BeginInvoke("StoreQuestionnaire", _args, callback, asyncState);
                return _result;
            }
            
            public void EndStoreQuestionnaire(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("StoreQuestionnaire", _args, result);
            }
            
            public System.IAsyncResult BeginDeleteQuestionnaire(string questionnaireName, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = questionnaireName;
                System.IAsyncResult _result = base.BeginInvoke("DeleteQuestionnaire", _args, callback, asyncState);
                return _result;
            }
            
            public void EndDeleteQuestionnaire(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("DeleteQuestionnaire", _args, result);
            }
            
            public System.IAsyncResult BeginGetUserQuestionnaireList(string userName, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = userName;
                System.IAsyncResult _result = base.BeginInvoke("GetUserQuestionnaireList", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.ObjectModel.ObservableCollection<string> EndGetUserQuestionnaireList(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.ObjectModel.ObservableCollection<string> _result = ((System.Collections.ObjectModel.ObservableCollection<string>)(base.EndInvoke("GetUserQuestionnaireList", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetUserAnalysts(string userName, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = userName;
                System.IAsyncResult _result = base.BeginInvoke("GetUserAnalysts", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.ObjectModel.ObservableCollection<string> EndGetUserAnalysts(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.ObjectModel.ObservableCollection<string> _result = ((System.Collections.ObjectModel.ObservableCollection<string>)(base.EndInvoke("GetUserAnalysts", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetUserRespondents(string userName, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = userName;
                System.IAsyncResult _result = base.BeginInvoke("GetUserRespondents", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.ObjectModel.ObservableCollection<string> EndGetUserRespondents(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.ObjectModel.ObservableCollection<string> _result = ((System.Collections.ObjectModel.ObservableCollection<string>)(base.EndInvoke("GetUserRespondents", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginAddAnalyst(string currentUserName, string analystUserName, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = currentUserName;
                _args[1] = analystUserName;
                System.IAsyncResult _result = base.BeginInvoke("AddAnalyst", _args, callback, asyncState);
                return _result;
            }
            
            public bool EndAddAnalyst(System.IAsyncResult result) {
                object[] _args = new object[0];
                bool _result = ((bool)(base.EndInvoke("AddAnalyst", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginRemoveAnalyst(string currentUserName, string analystUserName, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = currentUserName;
                _args[1] = analystUserName;
                System.IAsyncResult _result = base.BeginInvoke("RemoveAnalyst", _args, callback, asyncState);
                return _result;
            }
            
            public void EndRemoveAnalyst(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("RemoveAnalyst", _args, result);
            }
            
            public System.IAsyncResult BeginAddRespondent(string currentUserName, string respondentEmail, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = currentUserName;
                _args[1] = respondentEmail;
                System.IAsyncResult _result = base.BeginInvoke("AddRespondent", _args, callback, asyncState);
                return _result;
            }
            
            public bool EndAddRespondent(System.IAsyncResult result) {
                object[] _args = new object[0];
                bool _result = ((bool)(base.EndInvoke("AddRespondent", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginRemoveRespondent(string currentUserName, string respondentEmail, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = currentUserName;
                _args[1] = respondentEmail;
                System.IAsyncResult _result = base.BeginInvoke("RemoveRespondent", _args, callback, asyncState);
                return _result;
            }
            
            public void EndRemoveRespondent(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("RemoveRespondent", _args, result);
            }
            
            public System.IAsyncResult BeginStoreFilledQuestionnaire(Statis.StatisServices.FilledQuestionnaire filled, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = filled;
                System.IAsyncResult _result = base.BeginInvoke("StoreFilledQuestionnaire", _args, callback, asyncState);
                return _result;
            }
            
            public void EndStoreFilledQuestionnaire(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("StoreFilledQuestionnaire", _args, result);
            }
            
            public System.IAsyncResult BeginGetFilledQuestionnaire(System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[0];
                System.IAsyncResult _result = base.BeginInvoke("GetFilledQuestionnaire", _args, callback, asyncState);
                return _result;
            }
            
            public Statis.StatisServices.FilledQuestionnaire EndGetFilledQuestionnaire(System.IAsyncResult result) {
                object[] _args = new object[0];
                Statis.StatisServices.FilledQuestionnaire _result = ((Statis.StatisServices.FilledQuestionnaire)(base.EndInvoke("GetFilledQuestionnaire", _args, result)));
                return _result;
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="StatisServices.IQuestionnaireAdministrativeService")]
    public interface IQuestionnaireAdministrativeService {
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IQuestionnaireService/GetQuestionnaire", ReplyAction="http://tempuri.org/IQuestionnaireService/GetQuestionnaireResponse")]
        System.IAsyncResult BeginGetQuestionnaire(string questionnaireName, System.AsyncCallback callback, object asyncState);
        
        Statis.StatisServices.Questionnaire EndGetQuestionnaire(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, AsyncPattern=true, Action="http://tempuri.org/IQuestionnaireService/StoreQuestionnaire")]
        System.IAsyncResult BeginStoreQuestionnaire(Statis.StatisServices.Questionnaire questionnaire, System.AsyncCallback callback, object asyncState);
        
        void EndStoreQuestionnaire(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, AsyncPattern=true, Action="http://tempuri.org/IQuestionnaireService/DeleteQuestionnaire")]
        System.IAsyncResult BeginDeleteQuestionnaire(string questionnaireName, System.AsyncCallback callback, object asyncState);
        
        void EndDeleteQuestionnaire(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IQuestionnaireService/GetUserQuestionnaireList", ReplyAction="http://tempuri.org/IQuestionnaireService/GetUserQuestionnaireListResponse")]
        System.IAsyncResult BeginGetUserQuestionnaireList(string userName, System.AsyncCallback callback, object asyncState);
        
        System.Collections.ObjectModel.ObservableCollection<string> EndGetUserQuestionnaireList(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IQuestionnaireService/GetUserAnalysts", ReplyAction="http://tempuri.org/IQuestionnaireService/GetUserAnalystsResponse")]
        System.IAsyncResult BeginGetUserAnalysts(string userName, System.AsyncCallback callback, object asyncState);
        
        System.Collections.ObjectModel.ObservableCollection<string> EndGetUserAnalysts(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IQuestionnaireService/GetUserRespondents", ReplyAction="http://tempuri.org/IQuestionnaireService/GetUserRespondentsResponse")]
        System.IAsyncResult BeginGetUserRespondents(string userName, System.AsyncCallback callback, object asyncState);
        
        System.Collections.ObjectModel.ObservableCollection<string> EndGetUserRespondents(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IQuestionnaireService/AddAnalyst", ReplyAction="http://tempuri.org/IQuestionnaireService/AddAnalystResponse")]
        System.IAsyncResult BeginAddAnalyst(string currentUserName, string analystUserName, System.AsyncCallback callback, object asyncState);
        
        bool EndAddAnalyst(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, AsyncPattern=true, Action="http://tempuri.org/IQuestionnaireService/RemoveAnalyst")]
        System.IAsyncResult BeginRemoveAnalyst(string currentUserName, string analystUserName, System.AsyncCallback callback, object asyncState);
        
        void EndRemoveAnalyst(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IQuestionnaireService/AddRespondent", ReplyAction="http://tempuri.org/IQuestionnaireService/AddRespondentResponse")]
        System.IAsyncResult BeginAddRespondent(string currentUserName, string respondentEmail, System.AsyncCallback callback, object asyncState);
        
        bool EndAddRespondent(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, AsyncPattern=true, Action="http://tempuri.org/IQuestionnaireService/RemoveRespondent")]
        System.IAsyncResult BeginRemoveRespondent(string currentUserName, string respondentEmail, System.AsyncCallback callback, object asyncState);
        
        void EndRemoveRespondent(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, AsyncPattern=true, Action="http://tempuri.org/IQuestionnaireService/StoreFilledQuestionnaire")]
        System.IAsyncResult BeginStoreFilledQuestionnaire(Statis.StatisServices.FilledQuestionnaire filled, System.AsyncCallback callback, object asyncState);
        
        void EndStoreFilledQuestionnaire(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IQuestionnaireService/GetFilledQuestionnaire", ReplyAction="http://tempuri.org/IQuestionnaireService/GetFilledQuestionnaireResponse")]
        System.IAsyncResult BeginGetFilledQuestionnaire(System.AsyncCallback callback, object asyncState);
        
        Statis.StatisServices.FilledQuestionnaire EndGetFilledQuestionnaire(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IQuestionnaireAdministrativeServiceChannel : Statis.StatisServices.IQuestionnaireAdministrativeService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetQuestionnaireCompletedEventArgs1 : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetQuestionnaireCompletedEventArgs1(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Statis.StatisServices.Questionnaire Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Statis.StatisServices.Questionnaire)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetUserQuestionnaireListCompletedEventArgs1 : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetUserQuestionnaireListCompletedEventArgs1(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.ObjectModel.ObservableCollection<string> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.ObjectModel.ObservableCollection<string>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetUserAnalystsCompletedEventArgs1 : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetUserAnalystsCompletedEventArgs1(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.ObjectModel.ObservableCollection<string> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.ObjectModel.ObservableCollection<string>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetUserRespondentsCompletedEventArgs1 : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetUserRespondentsCompletedEventArgs1(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.ObjectModel.ObservableCollection<string> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.ObjectModel.ObservableCollection<string>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class AddAnalystCompletedEventArgs1 : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public AddAnalystCompletedEventArgs1(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class AddRespondentCompletedEventArgs1 : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public AddRespondentCompletedEventArgs1(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetFilledQuestionnaireCompletedEventArgs1 : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetFilledQuestionnaireCompletedEventArgs1(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Statis.StatisServices.FilledQuestionnaire Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Statis.StatisServices.FilledQuestionnaire)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class QuestionnaireAdministrativeServiceClient : System.ServiceModel.ClientBase<Statis.StatisServices.IQuestionnaireAdministrativeService>, Statis.StatisServices.IQuestionnaireAdministrativeService {
        
        private BeginOperationDelegate onBeginGetQuestionnaireDelegate;
        
        private EndOperationDelegate onEndGetQuestionnaireDelegate;
        
        private System.Threading.SendOrPostCallback onGetQuestionnaireCompletedDelegate;
        
        private BeginOperationDelegate onBeginStoreQuestionnaireDelegate;
        
        private EndOperationDelegate onEndStoreQuestionnaireDelegate;
        
        private System.Threading.SendOrPostCallback onStoreQuestionnaireCompletedDelegate;
        
        private BeginOperationDelegate onBeginDeleteQuestionnaireDelegate;
        
        private EndOperationDelegate onEndDeleteQuestionnaireDelegate;
        
        private System.Threading.SendOrPostCallback onDeleteQuestionnaireCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetUserQuestionnaireListDelegate;
        
        private EndOperationDelegate onEndGetUserQuestionnaireListDelegate;
        
        private System.Threading.SendOrPostCallback onGetUserQuestionnaireListCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetUserAnalystsDelegate;
        
        private EndOperationDelegate onEndGetUserAnalystsDelegate;
        
        private System.Threading.SendOrPostCallback onGetUserAnalystsCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetUserRespondentsDelegate;
        
        private EndOperationDelegate onEndGetUserRespondentsDelegate;
        
        private System.Threading.SendOrPostCallback onGetUserRespondentsCompletedDelegate;
        
        private BeginOperationDelegate onBeginAddAnalystDelegate;
        
        private EndOperationDelegate onEndAddAnalystDelegate;
        
        private System.Threading.SendOrPostCallback onAddAnalystCompletedDelegate;
        
        private BeginOperationDelegate onBeginRemoveAnalystDelegate;
        
        private EndOperationDelegate onEndRemoveAnalystDelegate;
        
        private System.Threading.SendOrPostCallback onRemoveAnalystCompletedDelegate;
        
        private BeginOperationDelegate onBeginAddRespondentDelegate;
        
        private EndOperationDelegate onEndAddRespondentDelegate;
        
        private System.Threading.SendOrPostCallback onAddRespondentCompletedDelegate;
        
        private BeginOperationDelegate onBeginRemoveRespondentDelegate;
        
        private EndOperationDelegate onEndRemoveRespondentDelegate;
        
        private System.Threading.SendOrPostCallback onRemoveRespondentCompletedDelegate;
        
        private BeginOperationDelegate onBeginStoreFilledQuestionnaireDelegate;
        
        private EndOperationDelegate onEndStoreFilledQuestionnaireDelegate;
        
        private System.Threading.SendOrPostCallback onStoreFilledQuestionnaireCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetFilledQuestionnaireDelegate;
        
        private EndOperationDelegate onEndGetFilledQuestionnaireDelegate;
        
        private System.Threading.SendOrPostCallback onGetFilledQuestionnaireCompletedDelegate;
        
        private BeginOperationDelegate onBeginOpenDelegate;
        
        private EndOperationDelegate onEndOpenDelegate;
        
        private System.Threading.SendOrPostCallback onOpenCompletedDelegate;
        
        private BeginOperationDelegate onBeginCloseDelegate;
        
        private EndOperationDelegate onEndCloseDelegate;
        
        private System.Threading.SendOrPostCallback onCloseCompletedDelegate;
        
        public QuestionnaireAdministrativeServiceClient() {
        }
        
        public QuestionnaireAdministrativeServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public QuestionnaireAdministrativeServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public QuestionnaireAdministrativeServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public QuestionnaireAdministrativeServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Net.CookieContainer CookieContainer {
            get {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    return httpCookieContainerManager.CookieContainer;
                }
                else {
                    return null;
                }
            }
            set {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    httpCookieContainerManager.CookieContainer = value;
                }
                else {
                    throw new System.InvalidOperationException("Unable to set the CookieContainer. Please make sure the binding contains an HttpC" +
                            "ookieContainerBindingElement.");
                }
            }
        }
        
        public event System.EventHandler<GetQuestionnaireCompletedEventArgs1> GetQuestionnaireCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> StoreQuestionnaireCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> DeleteQuestionnaireCompleted;
        
        public event System.EventHandler<GetUserQuestionnaireListCompletedEventArgs1> GetUserQuestionnaireListCompleted;
        
        public event System.EventHandler<GetUserAnalystsCompletedEventArgs1> GetUserAnalystsCompleted;
        
        public event System.EventHandler<GetUserRespondentsCompletedEventArgs1> GetUserRespondentsCompleted;
        
        public event System.EventHandler<AddAnalystCompletedEventArgs1> AddAnalystCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> RemoveAnalystCompleted;
        
        public event System.EventHandler<AddRespondentCompletedEventArgs1> AddRespondentCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> RemoveRespondentCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> StoreFilledQuestionnaireCompleted;
        
        public event System.EventHandler<GetFilledQuestionnaireCompletedEventArgs1> GetFilledQuestionnaireCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> OpenCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> CloseCompleted;
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Statis.StatisServices.IQuestionnaireAdministrativeService.BeginGetQuestionnaire(string questionnaireName, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetQuestionnaire(questionnaireName, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Statis.StatisServices.Questionnaire Statis.StatisServices.IQuestionnaireAdministrativeService.EndGetQuestionnaire(System.IAsyncResult result) {
            return base.Channel.EndGetQuestionnaire(result);
        }
        
        private System.IAsyncResult OnBeginGetQuestionnaire(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string questionnaireName = ((string)(inValues[0]));
            return ((Statis.StatisServices.IQuestionnaireAdministrativeService)(this)).BeginGetQuestionnaire(questionnaireName, callback, asyncState);
        }
        
        private object[] OnEndGetQuestionnaire(System.IAsyncResult result) {
            Statis.StatisServices.Questionnaire retVal = ((Statis.StatisServices.IQuestionnaireAdministrativeService)(this)).EndGetQuestionnaire(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetQuestionnaireCompleted(object state) {
            if ((this.GetQuestionnaireCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetQuestionnaireCompleted(this, new GetQuestionnaireCompletedEventArgs1(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetQuestionnaireAsync(string questionnaireName) {
            this.GetQuestionnaireAsync(questionnaireName, null);
        }
        
        public void GetQuestionnaireAsync(string questionnaireName, object userState) {
            if ((this.onBeginGetQuestionnaireDelegate == null)) {
                this.onBeginGetQuestionnaireDelegate = new BeginOperationDelegate(this.OnBeginGetQuestionnaire);
            }
            if ((this.onEndGetQuestionnaireDelegate == null)) {
                this.onEndGetQuestionnaireDelegate = new EndOperationDelegate(this.OnEndGetQuestionnaire);
            }
            if ((this.onGetQuestionnaireCompletedDelegate == null)) {
                this.onGetQuestionnaireCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetQuestionnaireCompleted);
            }
            base.InvokeAsync(this.onBeginGetQuestionnaireDelegate, new object[] {
                        questionnaireName}, this.onEndGetQuestionnaireDelegate, this.onGetQuestionnaireCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Statis.StatisServices.IQuestionnaireAdministrativeService.BeginStoreQuestionnaire(Statis.StatisServices.Questionnaire questionnaire, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginStoreQuestionnaire(questionnaire, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void Statis.StatisServices.IQuestionnaireAdministrativeService.EndStoreQuestionnaire(System.IAsyncResult result) {
            base.Channel.EndStoreQuestionnaire(result);
        }
        
        private System.IAsyncResult OnBeginStoreQuestionnaire(object[] inValues, System.AsyncCallback callback, object asyncState) {
            Statis.StatisServices.Questionnaire questionnaire = ((Statis.StatisServices.Questionnaire)(inValues[0]));
            return ((Statis.StatisServices.IQuestionnaireAdministrativeService)(this)).BeginStoreQuestionnaire(questionnaire, callback, asyncState);
        }
        
        private object[] OnEndStoreQuestionnaire(System.IAsyncResult result) {
            ((Statis.StatisServices.IQuestionnaireAdministrativeService)(this)).EndStoreQuestionnaire(result);
            return null;
        }
        
        private void OnStoreQuestionnaireCompleted(object state) {
            if ((this.StoreQuestionnaireCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.StoreQuestionnaireCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void StoreQuestionnaireAsync(Statis.StatisServices.Questionnaire questionnaire) {
            this.StoreQuestionnaireAsync(questionnaire, null);
        }
        
        public void StoreQuestionnaireAsync(Statis.StatisServices.Questionnaire questionnaire, object userState) {
            if ((this.onBeginStoreQuestionnaireDelegate == null)) {
                this.onBeginStoreQuestionnaireDelegate = new BeginOperationDelegate(this.OnBeginStoreQuestionnaire);
            }
            if ((this.onEndStoreQuestionnaireDelegate == null)) {
                this.onEndStoreQuestionnaireDelegate = new EndOperationDelegate(this.OnEndStoreQuestionnaire);
            }
            if ((this.onStoreQuestionnaireCompletedDelegate == null)) {
                this.onStoreQuestionnaireCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnStoreQuestionnaireCompleted);
            }
            base.InvokeAsync(this.onBeginStoreQuestionnaireDelegate, new object[] {
                        questionnaire}, this.onEndStoreQuestionnaireDelegate, this.onStoreQuestionnaireCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Statis.StatisServices.IQuestionnaireAdministrativeService.BeginDeleteQuestionnaire(string questionnaireName, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginDeleteQuestionnaire(questionnaireName, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void Statis.StatisServices.IQuestionnaireAdministrativeService.EndDeleteQuestionnaire(System.IAsyncResult result) {
            base.Channel.EndDeleteQuestionnaire(result);
        }
        
        private System.IAsyncResult OnBeginDeleteQuestionnaire(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string questionnaireName = ((string)(inValues[0]));
            return ((Statis.StatisServices.IQuestionnaireAdministrativeService)(this)).BeginDeleteQuestionnaire(questionnaireName, callback, asyncState);
        }
        
        private object[] OnEndDeleteQuestionnaire(System.IAsyncResult result) {
            ((Statis.StatisServices.IQuestionnaireAdministrativeService)(this)).EndDeleteQuestionnaire(result);
            return null;
        }
        
        private void OnDeleteQuestionnaireCompleted(object state) {
            if ((this.DeleteQuestionnaireCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.DeleteQuestionnaireCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void DeleteQuestionnaireAsync(string questionnaireName) {
            this.DeleteQuestionnaireAsync(questionnaireName, null);
        }
        
        public void DeleteQuestionnaireAsync(string questionnaireName, object userState) {
            if ((this.onBeginDeleteQuestionnaireDelegate == null)) {
                this.onBeginDeleteQuestionnaireDelegate = new BeginOperationDelegate(this.OnBeginDeleteQuestionnaire);
            }
            if ((this.onEndDeleteQuestionnaireDelegate == null)) {
                this.onEndDeleteQuestionnaireDelegate = new EndOperationDelegate(this.OnEndDeleteQuestionnaire);
            }
            if ((this.onDeleteQuestionnaireCompletedDelegate == null)) {
                this.onDeleteQuestionnaireCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDeleteQuestionnaireCompleted);
            }
            base.InvokeAsync(this.onBeginDeleteQuestionnaireDelegate, new object[] {
                        questionnaireName}, this.onEndDeleteQuestionnaireDelegate, this.onDeleteQuestionnaireCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Statis.StatisServices.IQuestionnaireAdministrativeService.BeginGetUserQuestionnaireList(string userName, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetUserQuestionnaireList(userName, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.ObjectModel.ObservableCollection<string> Statis.StatisServices.IQuestionnaireAdministrativeService.EndGetUserQuestionnaireList(System.IAsyncResult result) {
            return base.Channel.EndGetUserQuestionnaireList(result);
        }
        
        private System.IAsyncResult OnBeginGetUserQuestionnaireList(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string userName = ((string)(inValues[0]));
            return ((Statis.StatisServices.IQuestionnaireAdministrativeService)(this)).BeginGetUserQuestionnaireList(userName, callback, asyncState);
        }
        
        private object[] OnEndGetUserQuestionnaireList(System.IAsyncResult result) {
            System.Collections.ObjectModel.ObservableCollection<string> retVal = ((Statis.StatisServices.IQuestionnaireAdministrativeService)(this)).EndGetUserQuestionnaireList(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetUserQuestionnaireListCompleted(object state) {
            if ((this.GetUserQuestionnaireListCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetUserQuestionnaireListCompleted(this, new GetUserQuestionnaireListCompletedEventArgs1(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetUserQuestionnaireListAsync(string userName) {
            this.GetUserQuestionnaireListAsync(userName, null);
        }
        
        public void GetUserQuestionnaireListAsync(string userName, object userState) {
            if ((this.onBeginGetUserQuestionnaireListDelegate == null)) {
                this.onBeginGetUserQuestionnaireListDelegate = new BeginOperationDelegate(this.OnBeginGetUserQuestionnaireList);
            }
            if ((this.onEndGetUserQuestionnaireListDelegate == null)) {
                this.onEndGetUserQuestionnaireListDelegate = new EndOperationDelegate(this.OnEndGetUserQuestionnaireList);
            }
            if ((this.onGetUserQuestionnaireListCompletedDelegate == null)) {
                this.onGetUserQuestionnaireListCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetUserQuestionnaireListCompleted);
            }
            base.InvokeAsync(this.onBeginGetUserQuestionnaireListDelegate, new object[] {
                        userName}, this.onEndGetUserQuestionnaireListDelegate, this.onGetUserQuestionnaireListCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Statis.StatisServices.IQuestionnaireAdministrativeService.BeginGetUserAnalysts(string userName, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetUserAnalysts(userName, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.ObjectModel.ObservableCollection<string> Statis.StatisServices.IQuestionnaireAdministrativeService.EndGetUserAnalysts(System.IAsyncResult result) {
            return base.Channel.EndGetUserAnalysts(result);
        }
        
        private System.IAsyncResult OnBeginGetUserAnalysts(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string userName = ((string)(inValues[0]));
            return ((Statis.StatisServices.IQuestionnaireAdministrativeService)(this)).BeginGetUserAnalysts(userName, callback, asyncState);
        }
        
        private object[] OnEndGetUserAnalysts(System.IAsyncResult result) {
            System.Collections.ObjectModel.ObservableCollection<string> retVal = ((Statis.StatisServices.IQuestionnaireAdministrativeService)(this)).EndGetUserAnalysts(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetUserAnalystsCompleted(object state) {
            if ((this.GetUserAnalystsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetUserAnalystsCompleted(this, new GetUserAnalystsCompletedEventArgs1(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetUserAnalystsAsync(string userName) {
            this.GetUserAnalystsAsync(userName, null);
        }
        
        public void GetUserAnalystsAsync(string userName, object userState) {
            if ((this.onBeginGetUserAnalystsDelegate == null)) {
                this.onBeginGetUserAnalystsDelegate = new BeginOperationDelegate(this.OnBeginGetUserAnalysts);
            }
            if ((this.onEndGetUserAnalystsDelegate == null)) {
                this.onEndGetUserAnalystsDelegate = new EndOperationDelegate(this.OnEndGetUserAnalysts);
            }
            if ((this.onGetUserAnalystsCompletedDelegate == null)) {
                this.onGetUserAnalystsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetUserAnalystsCompleted);
            }
            base.InvokeAsync(this.onBeginGetUserAnalystsDelegate, new object[] {
                        userName}, this.onEndGetUserAnalystsDelegate, this.onGetUserAnalystsCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Statis.StatisServices.IQuestionnaireAdministrativeService.BeginGetUserRespondents(string userName, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetUserRespondents(userName, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.ObjectModel.ObservableCollection<string> Statis.StatisServices.IQuestionnaireAdministrativeService.EndGetUserRespondents(System.IAsyncResult result) {
            return base.Channel.EndGetUserRespondents(result);
        }
        
        private System.IAsyncResult OnBeginGetUserRespondents(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string userName = ((string)(inValues[0]));
            return ((Statis.StatisServices.IQuestionnaireAdministrativeService)(this)).BeginGetUserRespondents(userName, callback, asyncState);
        }
        
        private object[] OnEndGetUserRespondents(System.IAsyncResult result) {
            System.Collections.ObjectModel.ObservableCollection<string> retVal = ((Statis.StatisServices.IQuestionnaireAdministrativeService)(this)).EndGetUserRespondents(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetUserRespondentsCompleted(object state) {
            if ((this.GetUserRespondentsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetUserRespondentsCompleted(this, new GetUserRespondentsCompletedEventArgs1(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetUserRespondentsAsync(string userName) {
            this.GetUserRespondentsAsync(userName, null);
        }
        
        public void GetUserRespondentsAsync(string userName, object userState) {
            if ((this.onBeginGetUserRespondentsDelegate == null)) {
                this.onBeginGetUserRespondentsDelegate = new BeginOperationDelegate(this.OnBeginGetUserRespondents);
            }
            if ((this.onEndGetUserRespondentsDelegate == null)) {
                this.onEndGetUserRespondentsDelegate = new EndOperationDelegate(this.OnEndGetUserRespondents);
            }
            if ((this.onGetUserRespondentsCompletedDelegate == null)) {
                this.onGetUserRespondentsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetUserRespondentsCompleted);
            }
            base.InvokeAsync(this.onBeginGetUserRespondentsDelegate, new object[] {
                        userName}, this.onEndGetUserRespondentsDelegate, this.onGetUserRespondentsCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Statis.StatisServices.IQuestionnaireAdministrativeService.BeginAddAnalyst(string currentUserName, string analystUserName, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginAddAnalyst(currentUserName, analystUserName, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        bool Statis.StatisServices.IQuestionnaireAdministrativeService.EndAddAnalyst(System.IAsyncResult result) {
            return base.Channel.EndAddAnalyst(result);
        }
        
        private System.IAsyncResult OnBeginAddAnalyst(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string currentUserName = ((string)(inValues[0]));
            string analystUserName = ((string)(inValues[1]));
            return ((Statis.StatisServices.IQuestionnaireAdministrativeService)(this)).BeginAddAnalyst(currentUserName, analystUserName, callback, asyncState);
        }
        
        private object[] OnEndAddAnalyst(System.IAsyncResult result) {
            bool retVal = ((Statis.StatisServices.IQuestionnaireAdministrativeService)(this)).EndAddAnalyst(result);
            return new object[] {
                    retVal};
        }
        
        private void OnAddAnalystCompleted(object state) {
            if ((this.AddAnalystCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.AddAnalystCompleted(this, new AddAnalystCompletedEventArgs1(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void AddAnalystAsync(string currentUserName, string analystUserName) {
            this.AddAnalystAsync(currentUserName, analystUserName, null);
        }
        
        public void AddAnalystAsync(string currentUserName, string analystUserName, object userState) {
            if ((this.onBeginAddAnalystDelegate == null)) {
                this.onBeginAddAnalystDelegate = new BeginOperationDelegate(this.OnBeginAddAnalyst);
            }
            if ((this.onEndAddAnalystDelegate == null)) {
                this.onEndAddAnalystDelegate = new EndOperationDelegate(this.OnEndAddAnalyst);
            }
            if ((this.onAddAnalystCompletedDelegate == null)) {
                this.onAddAnalystCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnAddAnalystCompleted);
            }
            base.InvokeAsync(this.onBeginAddAnalystDelegate, new object[] {
                        currentUserName,
                        analystUserName}, this.onEndAddAnalystDelegate, this.onAddAnalystCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Statis.StatisServices.IQuestionnaireAdministrativeService.BeginRemoveAnalyst(string currentUserName, string analystUserName, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginRemoveAnalyst(currentUserName, analystUserName, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void Statis.StatisServices.IQuestionnaireAdministrativeService.EndRemoveAnalyst(System.IAsyncResult result) {
            base.Channel.EndRemoveAnalyst(result);
        }
        
        private System.IAsyncResult OnBeginRemoveAnalyst(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string currentUserName = ((string)(inValues[0]));
            string analystUserName = ((string)(inValues[1]));
            return ((Statis.StatisServices.IQuestionnaireAdministrativeService)(this)).BeginRemoveAnalyst(currentUserName, analystUserName, callback, asyncState);
        }
        
        private object[] OnEndRemoveAnalyst(System.IAsyncResult result) {
            ((Statis.StatisServices.IQuestionnaireAdministrativeService)(this)).EndRemoveAnalyst(result);
            return null;
        }
        
        private void OnRemoveAnalystCompleted(object state) {
            if ((this.RemoveAnalystCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.RemoveAnalystCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void RemoveAnalystAsync(string currentUserName, string analystUserName) {
            this.RemoveAnalystAsync(currentUserName, analystUserName, null);
        }
        
        public void RemoveAnalystAsync(string currentUserName, string analystUserName, object userState) {
            if ((this.onBeginRemoveAnalystDelegate == null)) {
                this.onBeginRemoveAnalystDelegate = new BeginOperationDelegate(this.OnBeginRemoveAnalyst);
            }
            if ((this.onEndRemoveAnalystDelegate == null)) {
                this.onEndRemoveAnalystDelegate = new EndOperationDelegate(this.OnEndRemoveAnalyst);
            }
            if ((this.onRemoveAnalystCompletedDelegate == null)) {
                this.onRemoveAnalystCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnRemoveAnalystCompleted);
            }
            base.InvokeAsync(this.onBeginRemoveAnalystDelegate, new object[] {
                        currentUserName,
                        analystUserName}, this.onEndRemoveAnalystDelegate, this.onRemoveAnalystCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Statis.StatisServices.IQuestionnaireAdministrativeService.BeginAddRespondent(string currentUserName, string respondentEmail, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginAddRespondent(currentUserName, respondentEmail, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        bool Statis.StatisServices.IQuestionnaireAdministrativeService.EndAddRespondent(System.IAsyncResult result) {
            return base.Channel.EndAddRespondent(result);
        }
        
        private System.IAsyncResult OnBeginAddRespondent(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string currentUserName = ((string)(inValues[0]));
            string respondentEmail = ((string)(inValues[1]));
            return ((Statis.StatisServices.IQuestionnaireAdministrativeService)(this)).BeginAddRespondent(currentUserName, respondentEmail, callback, asyncState);
        }
        
        private object[] OnEndAddRespondent(System.IAsyncResult result) {
            bool retVal = ((Statis.StatisServices.IQuestionnaireAdministrativeService)(this)).EndAddRespondent(result);
            return new object[] {
                    retVal};
        }
        
        private void OnAddRespondentCompleted(object state) {
            if ((this.AddRespondentCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.AddRespondentCompleted(this, new AddRespondentCompletedEventArgs1(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void AddRespondentAsync(string currentUserName, string respondentEmail) {
            this.AddRespondentAsync(currentUserName, respondentEmail, null);
        }
        
        public void AddRespondentAsync(string currentUserName, string respondentEmail, object userState) {
            if ((this.onBeginAddRespondentDelegate == null)) {
                this.onBeginAddRespondentDelegate = new BeginOperationDelegate(this.OnBeginAddRespondent);
            }
            if ((this.onEndAddRespondentDelegate == null)) {
                this.onEndAddRespondentDelegate = new EndOperationDelegate(this.OnEndAddRespondent);
            }
            if ((this.onAddRespondentCompletedDelegate == null)) {
                this.onAddRespondentCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnAddRespondentCompleted);
            }
            base.InvokeAsync(this.onBeginAddRespondentDelegate, new object[] {
                        currentUserName,
                        respondentEmail}, this.onEndAddRespondentDelegate, this.onAddRespondentCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Statis.StatisServices.IQuestionnaireAdministrativeService.BeginRemoveRespondent(string currentUserName, string respondentEmail, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginRemoveRespondent(currentUserName, respondentEmail, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void Statis.StatisServices.IQuestionnaireAdministrativeService.EndRemoveRespondent(System.IAsyncResult result) {
            base.Channel.EndRemoveRespondent(result);
        }
        
        private System.IAsyncResult OnBeginRemoveRespondent(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string currentUserName = ((string)(inValues[0]));
            string respondentEmail = ((string)(inValues[1]));
            return ((Statis.StatisServices.IQuestionnaireAdministrativeService)(this)).BeginRemoveRespondent(currentUserName, respondentEmail, callback, asyncState);
        }
        
        private object[] OnEndRemoveRespondent(System.IAsyncResult result) {
            ((Statis.StatisServices.IQuestionnaireAdministrativeService)(this)).EndRemoveRespondent(result);
            return null;
        }
        
        private void OnRemoveRespondentCompleted(object state) {
            if ((this.RemoveRespondentCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.RemoveRespondentCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void RemoveRespondentAsync(string currentUserName, string respondentEmail) {
            this.RemoveRespondentAsync(currentUserName, respondentEmail, null);
        }
        
        public void RemoveRespondentAsync(string currentUserName, string respondentEmail, object userState) {
            if ((this.onBeginRemoveRespondentDelegate == null)) {
                this.onBeginRemoveRespondentDelegate = new BeginOperationDelegate(this.OnBeginRemoveRespondent);
            }
            if ((this.onEndRemoveRespondentDelegate == null)) {
                this.onEndRemoveRespondentDelegate = new EndOperationDelegate(this.OnEndRemoveRespondent);
            }
            if ((this.onRemoveRespondentCompletedDelegate == null)) {
                this.onRemoveRespondentCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnRemoveRespondentCompleted);
            }
            base.InvokeAsync(this.onBeginRemoveRespondentDelegate, new object[] {
                        currentUserName,
                        respondentEmail}, this.onEndRemoveRespondentDelegate, this.onRemoveRespondentCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Statis.StatisServices.IQuestionnaireAdministrativeService.BeginStoreFilledQuestionnaire(Statis.StatisServices.FilledQuestionnaire filled, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginStoreFilledQuestionnaire(filled, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void Statis.StatisServices.IQuestionnaireAdministrativeService.EndStoreFilledQuestionnaire(System.IAsyncResult result) {
            base.Channel.EndStoreFilledQuestionnaire(result);
        }
        
        private System.IAsyncResult OnBeginStoreFilledQuestionnaire(object[] inValues, System.AsyncCallback callback, object asyncState) {
            Statis.StatisServices.FilledQuestionnaire filled = ((Statis.StatisServices.FilledQuestionnaire)(inValues[0]));
            return ((Statis.StatisServices.IQuestionnaireAdministrativeService)(this)).BeginStoreFilledQuestionnaire(filled, callback, asyncState);
        }
        
        private object[] OnEndStoreFilledQuestionnaire(System.IAsyncResult result) {
            ((Statis.StatisServices.IQuestionnaireAdministrativeService)(this)).EndStoreFilledQuestionnaire(result);
            return null;
        }
        
        private void OnStoreFilledQuestionnaireCompleted(object state) {
            if ((this.StoreFilledQuestionnaireCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.StoreFilledQuestionnaireCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void StoreFilledQuestionnaireAsync(Statis.StatisServices.FilledQuestionnaire filled) {
            this.StoreFilledQuestionnaireAsync(filled, null);
        }
        
        public void StoreFilledQuestionnaireAsync(Statis.StatisServices.FilledQuestionnaire filled, object userState) {
            if ((this.onBeginStoreFilledQuestionnaireDelegate == null)) {
                this.onBeginStoreFilledQuestionnaireDelegate = new BeginOperationDelegate(this.OnBeginStoreFilledQuestionnaire);
            }
            if ((this.onEndStoreFilledQuestionnaireDelegate == null)) {
                this.onEndStoreFilledQuestionnaireDelegate = new EndOperationDelegate(this.OnEndStoreFilledQuestionnaire);
            }
            if ((this.onStoreFilledQuestionnaireCompletedDelegate == null)) {
                this.onStoreFilledQuestionnaireCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnStoreFilledQuestionnaireCompleted);
            }
            base.InvokeAsync(this.onBeginStoreFilledQuestionnaireDelegate, new object[] {
                        filled}, this.onEndStoreFilledQuestionnaireDelegate, this.onStoreFilledQuestionnaireCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Statis.StatisServices.IQuestionnaireAdministrativeService.BeginGetFilledQuestionnaire(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetFilledQuestionnaire(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Statis.StatisServices.FilledQuestionnaire Statis.StatisServices.IQuestionnaireAdministrativeService.EndGetFilledQuestionnaire(System.IAsyncResult result) {
            return base.Channel.EndGetFilledQuestionnaire(result);
        }
        
        private System.IAsyncResult OnBeginGetFilledQuestionnaire(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((Statis.StatisServices.IQuestionnaireAdministrativeService)(this)).BeginGetFilledQuestionnaire(callback, asyncState);
        }
        
        private object[] OnEndGetFilledQuestionnaire(System.IAsyncResult result) {
            Statis.StatisServices.FilledQuestionnaire retVal = ((Statis.StatisServices.IQuestionnaireAdministrativeService)(this)).EndGetFilledQuestionnaire(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetFilledQuestionnaireCompleted(object state) {
            if ((this.GetFilledQuestionnaireCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetFilledQuestionnaireCompleted(this, new GetFilledQuestionnaireCompletedEventArgs1(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetFilledQuestionnaireAsync() {
            this.GetFilledQuestionnaireAsync(null);
        }
        
        public void GetFilledQuestionnaireAsync(object userState) {
            if ((this.onBeginGetFilledQuestionnaireDelegate == null)) {
                this.onBeginGetFilledQuestionnaireDelegate = new BeginOperationDelegate(this.OnBeginGetFilledQuestionnaire);
            }
            if ((this.onEndGetFilledQuestionnaireDelegate == null)) {
                this.onEndGetFilledQuestionnaireDelegate = new EndOperationDelegate(this.OnEndGetFilledQuestionnaire);
            }
            if ((this.onGetFilledQuestionnaireCompletedDelegate == null)) {
                this.onGetFilledQuestionnaireCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetFilledQuestionnaireCompleted);
            }
            base.InvokeAsync(this.onBeginGetFilledQuestionnaireDelegate, null, this.onEndGetFilledQuestionnaireDelegate, this.onGetFilledQuestionnaireCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginOpen(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(callback, asyncState);
        }
        
        private object[] OnEndOpen(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndOpen(result);
            return null;
        }
        
        private void OnOpenCompleted(object state) {
            if ((this.OpenCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.OpenCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void OpenAsync() {
            this.OpenAsync(null);
        }
        
        public void OpenAsync(object userState) {
            if ((this.onBeginOpenDelegate == null)) {
                this.onBeginOpenDelegate = new BeginOperationDelegate(this.OnBeginOpen);
            }
            if ((this.onEndOpenDelegate == null)) {
                this.onEndOpenDelegate = new EndOperationDelegate(this.OnEndOpen);
            }
            if ((this.onOpenCompletedDelegate == null)) {
                this.onOpenCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnOpenCompleted);
            }
            base.InvokeAsync(this.onBeginOpenDelegate, null, this.onEndOpenDelegate, this.onOpenCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginClose(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginClose(callback, asyncState);
        }
        
        private object[] OnEndClose(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndClose(result);
            return null;
        }
        
        private void OnCloseCompleted(object state) {
            if ((this.CloseCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CloseCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CloseAsync() {
            this.CloseAsync(null);
        }
        
        public void CloseAsync(object userState) {
            if ((this.onBeginCloseDelegate == null)) {
                this.onBeginCloseDelegate = new BeginOperationDelegate(this.OnBeginClose);
            }
            if ((this.onEndCloseDelegate == null)) {
                this.onEndCloseDelegate = new EndOperationDelegate(this.OnEndClose);
            }
            if ((this.onCloseCompletedDelegate == null)) {
                this.onCloseCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCloseCompleted);
            }
            base.InvokeAsync(this.onBeginCloseDelegate, null, this.onEndCloseDelegate, this.onCloseCompletedDelegate, userState);
        }
        
        protected override Statis.StatisServices.IQuestionnaireAdministrativeService CreateChannel() {
            return new QuestionnaireAdministrativeServiceClientChannel(this);
        }
        
        private class QuestionnaireAdministrativeServiceClientChannel : ChannelBase<Statis.StatisServices.IQuestionnaireAdministrativeService>, Statis.StatisServices.IQuestionnaireAdministrativeService {
            
            public QuestionnaireAdministrativeServiceClientChannel(System.ServiceModel.ClientBase<Statis.StatisServices.IQuestionnaireAdministrativeService> client) : 
                    base(client) {
            }
            
            public System.IAsyncResult BeginGetQuestionnaire(string questionnaireName, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = questionnaireName;
                System.IAsyncResult _result = base.BeginInvoke("GetQuestionnaire", _args, callback, asyncState);
                return _result;
            }
            
            public Statis.StatisServices.Questionnaire EndGetQuestionnaire(System.IAsyncResult result) {
                object[] _args = new object[0];
                Statis.StatisServices.Questionnaire _result = ((Statis.StatisServices.Questionnaire)(base.EndInvoke("GetQuestionnaire", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginStoreQuestionnaire(Statis.StatisServices.Questionnaire questionnaire, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = questionnaire;
                System.IAsyncResult _result = base.BeginInvoke("StoreQuestionnaire", _args, callback, asyncState);
                return _result;
            }
            
            public void EndStoreQuestionnaire(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("StoreQuestionnaire", _args, result);
            }
            
            public System.IAsyncResult BeginDeleteQuestionnaire(string questionnaireName, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = questionnaireName;
                System.IAsyncResult _result = base.BeginInvoke("DeleteQuestionnaire", _args, callback, asyncState);
                return _result;
            }
            
            public void EndDeleteQuestionnaire(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("DeleteQuestionnaire", _args, result);
            }
            
            public System.IAsyncResult BeginGetUserQuestionnaireList(string userName, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = userName;
                System.IAsyncResult _result = base.BeginInvoke("GetUserQuestionnaireList", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.ObjectModel.ObservableCollection<string> EndGetUserQuestionnaireList(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.ObjectModel.ObservableCollection<string> _result = ((System.Collections.ObjectModel.ObservableCollection<string>)(base.EndInvoke("GetUserQuestionnaireList", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetUserAnalysts(string userName, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = userName;
                System.IAsyncResult _result = base.BeginInvoke("GetUserAnalysts", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.ObjectModel.ObservableCollection<string> EndGetUserAnalysts(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.ObjectModel.ObservableCollection<string> _result = ((System.Collections.ObjectModel.ObservableCollection<string>)(base.EndInvoke("GetUserAnalysts", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetUserRespondents(string userName, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = userName;
                System.IAsyncResult _result = base.BeginInvoke("GetUserRespondents", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.ObjectModel.ObservableCollection<string> EndGetUserRespondents(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.ObjectModel.ObservableCollection<string> _result = ((System.Collections.ObjectModel.ObservableCollection<string>)(base.EndInvoke("GetUserRespondents", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginAddAnalyst(string currentUserName, string analystUserName, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = currentUserName;
                _args[1] = analystUserName;
                System.IAsyncResult _result = base.BeginInvoke("AddAnalyst", _args, callback, asyncState);
                return _result;
            }
            
            public bool EndAddAnalyst(System.IAsyncResult result) {
                object[] _args = new object[0];
                bool _result = ((bool)(base.EndInvoke("AddAnalyst", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginRemoveAnalyst(string currentUserName, string analystUserName, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = currentUserName;
                _args[1] = analystUserName;
                System.IAsyncResult _result = base.BeginInvoke("RemoveAnalyst", _args, callback, asyncState);
                return _result;
            }
            
            public void EndRemoveAnalyst(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("RemoveAnalyst", _args, result);
            }
            
            public System.IAsyncResult BeginAddRespondent(string currentUserName, string respondentEmail, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = currentUserName;
                _args[1] = respondentEmail;
                System.IAsyncResult _result = base.BeginInvoke("AddRespondent", _args, callback, asyncState);
                return _result;
            }
            
            public bool EndAddRespondent(System.IAsyncResult result) {
                object[] _args = new object[0];
                bool _result = ((bool)(base.EndInvoke("AddRespondent", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginRemoveRespondent(string currentUserName, string respondentEmail, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = currentUserName;
                _args[1] = respondentEmail;
                System.IAsyncResult _result = base.BeginInvoke("RemoveRespondent", _args, callback, asyncState);
                return _result;
            }
            
            public void EndRemoveRespondent(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("RemoveRespondent", _args, result);
            }
            
            public System.IAsyncResult BeginStoreFilledQuestionnaire(Statis.StatisServices.FilledQuestionnaire filled, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = filled;
                System.IAsyncResult _result = base.BeginInvoke("StoreFilledQuestionnaire", _args, callback, asyncState);
                return _result;
            }
            
            public void EndStoreFilledQuestionnaire(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("StoreFilledQuestionnaire", _args, result);
            }
            
            public System.IAsyncResult BeginGetFilledQuestionnaire(System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[0];
                System.IAsyncResult _result = base.BeginInvoke("GetFilledQuestionnaire", _args, callback, asyncState);
                return _result;
            }
            
            public Statis.StatisServices.FilledQuestionnaire EndGetFilledQuestionnaire(System.IAsyncResult result) {
                object[] _args = new object[0];
                Statis.StatisServices.FilledQuestionnaire _result = ((Statis.StatisServices.FilledQuestionnaire)(base.EndInvoke("GetFilledQuestionnaire", _args, result)));
                return _result;
            }
        }
    }
}
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        
